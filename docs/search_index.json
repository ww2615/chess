[["index.html", "Chess Game Analysis Chapter 1 Introduction 1.1 Background 1.2 Scope of the Project 1.3 Introductory Chess Knowledge 1.4 Specific Libraries Used", " Chess Game Analysis Ju Hyun Jeon Freddy Wong 2021-12-11 Chapter 1 Introduction 1.1 Background Chess is one of the most popular and oldest games in the world which could be dated back to the 15th century. In todays world, more than millions of people play chess every day. According to a press release by AGON, 605 million adults play chess regularly, which is comparable to the number of regular users of Facebook. Thanks to the two biggest platforms for online chess, Chess.com and Lichess.org, either new players or experienced players could match-make with people with similar skill levels. While chess rules are simple and easy to learn, chess is full of ideas and strategies. The number of positions grow exponentially every move. After white and black moves one piece each, the game can reach 400 positions. After the second and third move, 197742 and 121 million positions can be reached. The complexity of chess contrary to its simple rules has led it to be one of the hot topics in AI research. For this project, we took advantage of the open database of Lichess.org that provides up to 1 billion games of data per month to analyze and discovered insightful takeaways for future researchers on this topic. 1.2 Scope of the Project Since the game of chess itself is profound enough that many has done years of research on it, it is not possible for this project to visit every aspect of chess. For this project, we will focus on the relationship of time and moves statistically instead of studying series of moves that would be related to strategy. We hope the results of this project would provide players a new perspective on choosing a move when he/she is under time pressure. Thus, we have implemented an idea of Time ratio which would be discussed in later sessions. With different plotting techniques, we expect to visualize some meaningful findings. 1.3 Introductory Chess Knowledge As most chess games do, online chess is also played in a specific time format. You are given aspecific amount of time and have to make moves within that time. If your time reaches 0, you immediately lose. Time formats are usually notated in the form a + b where a is the time you start with and b is the time you get after every move also called increment. There are also classification for chess moves. In this project, we will be mostly dealing with bad moves which classify into 3 categories, dubious, mistake, and blunder. Dubious moves are objectively bad but possibly have some merits. Mistakes are bad moves that should not have been played. Blunders are bad mistakes that end up in a loss of material or a mating sequence. Dubious Move Mistake Blunder 1.4 Specific Libraries Used 1.4.1 Rchess A package developed by Joshua Kunst that wraps the chess.js javascript library and the chessboardjs library for analyzing chess move, piece movement and check detection. For more info, please visit: {https://www.github.com/jbkunst/rchess} "],["data-sources.html", "Chapter 2 Data sources 2.1 Chess game notations 2.2 Choosing the right data 2.3 Lichess Game Data Format 2.4 Missing Data 2.5 Moves Data 2.6 600+0 Data", " Chapter 2 Data sources 2.1 Chess game notations Chess positions can be stored in one of two formats: PGNs or FENs. PGN (Portable Game Format) is often used when people write down moves from the start of the game. PGN can also include data such as event names, players, ELO, and results. FEN (Forsyth-Edwards Notation) is a simplified shorter notation that can describe one position. FEN has the disadvantage of not being able to encode data outside of chess positions such as move order, player names, ELO, and results. In this project, we will be following chess games from the start of the game thus will be using the PGN format as the base format. The following encode the same chess game or chess position. 2.1.1 Image of the position Sample Position 2.1.2 - Sample PGN [Event EDAV chess tournament] [Site Columbia University, NYC] [Date December 1st] [Round 1] [White student A] [Black student B] [Result 1-0] e4 1e5 2.Nf3 2Nc6 1-0 2.1.3 - Sample FEN r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3 2.2 Choosing the right data There are many online data sets that include chess PGN. For instance, CRAN Project RChess has its data set chesswc which is a collection of chess games from the FIDE World Cup 2011, 2013, and 2015. However, for the purpose of our project, there were a specific set of requirements that had to be sufficed: Sufficient amount of chess games Evaluation of every move Clock after every move The First requirement is relatively simple to achieve. However, very few chess data sets include computer evaluation and clock time in their PGNs. The second and third requirements are not part of the original PGN notation making it the limiting factor for our choice of data set. We decided to use the data from lichess database. The project decided to use the October 2021 games that included 88,092,721 games played online in lichess.org. Some of the games in the database encoded evaluation and clock time after every move. 2.3 Lichess Game Data Format lichess_db_standard_rated_2021-10.pgn Total 88,092,721 games. The file can be downloaded from database.lichess.org. The file is a list of PGNs without an index. All of the following data sets are results of organizing this data. Not all games from the database are guaranteed to have [%clk] or [%eval] which are the clock time and the evaluation of the position. According to the Lichess database, around 6% of the games are annotated with evaluation. The following is a sample PGN format Lichess uses. [Event Rated Bullet game] [Site https://lichess.org/NRafdioG] [Date 2021.10.01] [Round -] [White xtzdavi182] [Black al_fatih] [Result 1-0] [UTCDate 2021.10.01] [UTCTime 00:00:14] [WhiteElo 1703] [BlackElo 1698] [WhiteRatingDiff +6] [BlackRatingDiff -6] [ECO B50] [Opening Sicilian Defense: Modern Variations] [TimeControl 60+0] [Termination Time forfeit] e4 { [%clk 0:01:00] } 1 c5 { [%clk 0:01:00] } 2. Nf3 { [%clk 0:01:00] } 2 d6 { [%clk 0:00:59] } 3. b3 { [%clk 0:01:00] } 3 Nc6 { [%clk 0:00:58] } 4. Bb2 { [%clk 0:01:00] } 4 Nf6 { [%clk 0:00:58] } 5. Bb5 { [%clk 0:00:59] } 5 Bd7 { [%clk 0:00:56] } 6. O-O { [%clk 0:00:59] } 6 a6 { [%clk 0:00:55] } 7. Bxc6 { [%clk 0:00:58] } 7 Bxc6 { [%clk 0:00:55] } 8. Re1 { [%clk 0:00:58] } 8 g6 { [%clk 0:00:55] } 9. h3 { [%clk 0:00:58] } 9 Bg7 { [%clk 0:00:54] } 10. d3 { [%clk 0:00:57] } 10 O-O { [%clk 0:00:53] } 11. Nbd2 { [%clk 0:00:57] } 11 b5 { [%clk 0:00:51] } 12. Rb1 { [%clk 0:00:57] } 12 Re8 { [%clk 0:00:51] } 13. c4 { [%clk 0:00:57] } 13 b4 { [%clk 0:00:49] } 14. a3 { [%clk 0:00:56] } 14 a5 { [%clk 0:00:47] } 15. axb4 { [%clk 0:00:55] } 15 cxb4 { [%clk 0:00:47] } 16. Ra1 { [%clk 0:00:55] } 16 Qb6 { [%clk 0:00:45] } 17. Bd4 { [%clk 0:00:53] } 17 Qc7 { [%clk 0:00:43] } 18. e5 { [%clk 0:00:51] } 18 dxe5 { [%clk 0:00:42] } 19. Nxe5 { [%clk 0:00:51] } 19 Bb7 { [%clk 0:00:39] } 20. Qc2 { [%clk 0:00:44] } 20 Rad8 { [%clk 0:00:38] } 21. Be3 { [%clk 0:00:42] } 21 Nd5 { [%clk 0:00:31] } 22. Nef3 { [%clk 0:00:40] } 22 Nxe3 { [%clk 0:00:29] } 23. Rxe3 { [%clk 0:00:40] } 23 Qd6 { [%clk 0:00:25] } 24. Rae1 { [%clk 0:00:39] } 24 e6 { [%clk 0:00:23] } 25. d4 { [%clk 0:00:38] } 25 Bxf3 { [%clk 0:00:18] } 26. Nxf3 { [%clk 0:00:37] } 26 Rc8 { [%clk 0:00:14] } 27. c5 { [%clk 0:00:34] } 27 Qd5 { [%clk 0:00:11] } 28. Rd3 { [%clk 0:00:32] } 28 Red8 { [%clk 0:00:10] } 29. Re5 { [%clk 0:00:31] } 29 Qc6 { [%clk 0:00:07] } 30. Ree3 { [%clk 0:00:29] } 30 Qb5 { [%clk 0:00:06] } 31. Qe2 { [%clk 0:00:27] } 31 Rc7 { [%clk 0:00:04] } 32. Rxe6 { [%clk 0:00:26] } 32 fxe6 { [%clk 0:00:03] } 33. Qxe6+ { [%clk 0:00:26] } 1-0 2.4 Missing Data data_index.csv index from 1 - 9 10,000,000 lines per csv. Total 88,092,721 lines. The data_index.csv was created to understand which data was missing in the original data. The columns of the data were constructed as follows. Column Name Description Result Result of the game (chr) ex) 1-0 UTCDate UTC date of the game (chr) ex) 2021.10.01 UTCTime UTC time of the game (num) ex) 00:00:14 WhiteElo White players Elo in Lichess (num) BlackElo Black players Elo in Lichess (num) WhiteRatingDiff Change in White players Elo after the game (num) BlackRatingDiff Change in Black players Elo after the game (num) ECO Encyclopedia of Chess Openings. The Opening that was played in the game (chr) ex) B50 TimeControl The time format in which the game was played. (chr) ex) 10 minutes + 5 second increment = 600+5 Termination How the game ended (chr) ex) Normal(checkmate or resignation), Abandoned(players left the game), Time Forfeit (players ran out of time) Evaluation Whether or not the game was annotated (chr) ex) Yes, No 2.5 Moves Data moves_index.csv index from 1 - 93 5,000,000 lines per csv. Total 464,436,334 lines. The moves_index.csv was created to format the data move by move. The columns of the data were constructed as follows. Column Name Description Result Result of the game (chr) ex) 1-0 WhiteElo White players Elo in Lichess (num) BlackElo Black players Elo in Lichess (num) ECO Encyclopedia of Chess Openings. The Opening that was played in the game (chr) ex) B50 TimeControl The time format in which the game was played. (chr) ex) 10 minutes + 5 second increment = 600+5 Termination How the game ended (chr) ex) Normal(checkmate or resignation), Abandoned(players left the game), Time Forfeit (players ran out of time) Color The color of the player that made the move (chr) ex) w or b MoveNum The number of the move (num) Move The algebraic notation of the move made (chr) ex) Qh4 Type One of the seven types of move: blunder, mistake, dubious, normal, interesting, good, and brilliant (chr) Eval Computer evaluation after the move (chr) ex) 0.07 or #2(mate in 2 for white) EvalDiff The change in evaluation. It is 0 when the previous or current evaluation was forced mate (#number) (num) Time Time left for the player (num) ex) 0:01:50 TimeSpent Time spent on the move (num) ex) 0:00:02 2.6 600+0 Data 600+0_index.csv index from 1 - 16 5,000,000 lines per csv. Total 78,867,621 lines. The 600+0_index.csv was created to work with a manageable size of data. The columns of the data were identical to moves_index.csv. "],["data-transformation.html", "Chapter 3 Data transformation 3.1 Understanding the Raw Data 3.2 Formatting the Raw Data 3.3 Crafting the Columns 3.4 Focusing on 600+0 data", " Chapter 3 Data transformation 3.1 Understanding the Raw Data The raw data was in a zipped format of .pgn.bz2. The unzipped .pgn file was then converted through read.py. The result of this transformation was named data_index.csv each constituting 10,000,000 lines. Naturally, there were 9 files since the total count of games in the original data was 88,092,721. Each row represented a game with columns. This data_index.csv was only generated to answer the following questions. What items are missing in the original data? How many games were annotated? The answer to the first question will be answered in the next chapter. From the data, we deduced that 7,142,630 / 88,092,721 = 8.1 % of the games were annotated compared to the 6 % claimed on the website. 3.2 Formatting the Raw Data We decided to focus on the 7,142,630 games that were annotated. The formatting process was done using eval.py. This process was different from the read.py that the resulting csv(pgn_index.csv) from eval.py contained the PGN descriptions of every game played. This process was conducted to generate a working csv dataset independent from the original data set. The second formatting process used edit.py. The formatting process intended to change each row to moves instead of games. The missing data of this csv data set will be examined in the next chapter. 464,436,334 annotated moves have been played but this data set was impossible to work with due to its size. (The resulting size was 32.9 GB) We decided to focus on the most popular time control format 600 + 0 or 10 minutes with no increment. This time format is 16.91 % of all games. The timecount.csv was generated through count.py. By choosing this time format, we were able to conduct a deeper analysis of the relationship between time and bad moves. 3.3 Crafting the Columns When transforming the data to moves_index.csv, we selected and crafted columns to fit our analyses. Since the quality of moves and time was the focus of our analysis, columns such as UTCDate, UTCTime, White, and BlackRatingDiff were removed. Example Transformation) 1 c5 { [%clk 0:01:00] [%eval 0.00]} 2. Nf3 { [%clk 0:01:00] [%eval 0.00]} 2 d6? { [%clk 0:00:59] [%eval -1.00]} Lets focus on 2d6? MoveNum, Color, and Move was crafted by separating the strings 2... d6 to 2 ... = band d6?. Type was crafted by checking whether the move included ?, ?!, ??, !, !?, and !!. The purpose of creating Type was to filter the variable to understand blunders. Time and Eval was the %clk and %eval on the move. TimeSpent and EvalDiff was generated by subtracting the values. TimeSpent was the difference of time between moves(same color). ex) 0:00:01 between 1c5 and 2d6? EvalDiff was the difference of evaluation between turns(opposite color). ex) -1.00 between 2. Nf3 and 2d6? These columns were also used in 600+0.csv. The transformation was processed using edit.py. 3.4 Focusing on 600+0 data We can run a weighted t-test and chi-squared test on the Elo of players Both results show that the mean of both data is the same and the data are dependent The elocount.csv and elo600count.csv was generated through count.py. ## $test ## [1] &quot;Two Sample Weighted T-Test (Welch)&quot; ## ## $coefficients ## t.value df p.value ## -0.0866588 55.2709206 0.9312559 ## ## $additional ## Difference Mean.x Mean.y Std. Err ## -8.984344 1647.843875 1656.828220 103.674924 ## ## Pearson&#39;s Chi-squared test ## ## data: df0$count and df1$count ## X-squared = 667, df = 598, p-value = 0.02605 The following are the histogram and boxplots of the Elo distribution of all annotated games compared to 600+0 annotated games. It is clear that 600+0 is a good representation of the players playing in lichess.org. The analysis will be based on the more manageable 600+0 dataset. "],["missing-values.html", "Chapter 4 Missing values 4.1 Missing Values from Original Data 4.2 Missing Values of Generated Data", " Chapter 4 Missing values 4.1 Missing Values from Original Data The following graph was generated by using the dataset data_index.csv. The code for generating the following graphs can be accessed in plot.R and MissingDataMultiple.R. The original data set from lichess database had missing values in WhiteRatingDiff and BlackRatingDiff. We expected the data set to be complete but some of the game PGNs did not contain [WhiteRatingDiff ??] or [BlackRatingDiff ??]. We were not able to understand the reason for the flaws but they were irrelevant in our analyses Missing Data Plot for Original PGN data 4.2 Missing Values of Generated Data Since the Elo system is not the focus of our analyses, the moves.csv and 600.csv included a different set of columns. The data set for moves.csv and 600.csv were complete and created no hardships. Missing Data Plot for moves.csv Missing Data Plot for 600.csv "],["results.html", "Chapter 5 Results 5.1 Time and Moves 5.2 Investigating how the games ended", " Chapter 5 Results 5.1 Time and Moves How does time and the quality of moves correlate? We can first start by considering the simple case. 5.1.1 Time amd Time Spent by Move Type The distribution of Time and Time Spent by the type of moves people make. This graph provides a very unique insight to the correlation. 5.1.1.1 Time For Time: Normal moves have the biggest std as expected. People have less Time Left after they make a blunder or mistake Dubious moves are mostly made in the first 40 second of the game. This may imply that dubious moves are part of the opening. When the time left reaches 5 minutes and 1 minutes, sudden fluctuations were found for the count of moves It is believed that 10 seconds, 1 minute and 5 minutes acted as a psychological catalyst that urged players to make a move For both fluctuations at 5mins and 1min, we can see the curves for normal moves peak earlier than the other type of moves and the other moves almost peaked at the same time. However, dubious moves happened the most when there are 5 minutes left while mistake moves happened the most when there is only 1 minute left. When the time left is less than 10 seconds, the distribution of the moves changed. Normal moves are made the most. 5.1.1.2 Time Spent For Time Spent: Normal moves are made fast. Normal moves may be obvious given the position Normal moves may be automatically played during the opening. Blunder takes more average time than any other type of move. This is less obvious. We think blunders are made fast without thought. Mistakes also take more time than normal moves. This is a heatmap of Time Left - Time Spent per type of move. It becomes evident that people play bad moves early in the game 5.1.2 Time ratio by Move Lets define ratio = Time Spent / Time. This concept of ratio is helpful in the sense that the person could have spent more time considering the position. For instance, given 1 second of time left and the player makes a move in 1 second, then there is less possibility that the player would have detected a better move. However, given 60 second of time left and the player makes a move in 1 second and blunder, this is a bad decision and probably the player should have thought more before they made the move. ## X Type mean std ## 1 1 dubious 0.1424937 0.1303141 ## 2 2 mistake 0.1668489 0.1409064 ## 3 3 blunder 0.1771698 0.1542783 ## 4 4 normal 0.2248049 0.1818782 From this graph, The mean of normal moves are much higher than other moves. Normal moves are a result of higher ratio of Time Spent / Time. Dubious moves are most likely intended or result of bad understanding early on in the game. Mistakes and blunders are also a result of not enough thinking. Players could have spent much more time thinking about the position and not blundering. 5.1.3 Quality of move during low time Players have to make decisions in a short period of time and the quality of decision is related to time. Using Time ratio is one of the ways to study the relationship. Thanks to the computer evaluation made to each moves, we can use the Eval and EvalDiff from the dataset to quantify quality of move and the difference in quality of each pair of moves. The result of this section would give insight to players that what piece would have better odds of having a higher evaluation under low time. Heres the summary of the statistics: ## X X...EvalDiff X.....Eval ## 1 NA Min. :-150.92000 Min. :-152.6500 ## 2 NA 1st Qu.: -0.31000 1st Qu.: -2.0000 ## 3 NA Median : 0.00000 Median : 0.1400 ## 4 NA Mean : 0.00394 Mean : 0.3011 ## 5 NA 3rd Qu.: 0.31000 3rd Qu.: 2.8400 ## 6 NA Max. : 150.47000 Max. : 152.6500 To represent low time with Time ratio, a specific range was chosen [0,0.0025] since we found that from 5.1.2 and the above graph that the majority of Time ratio is from 0.0015 to 0.01. Thus, one-forth of 0.01 was used to represent low time. Within the time ratio of 0.0025, it is found that Evaluation difference increases as the time ratio decrease further for most pieces except rook. Which means the advantage of moving a piece in a lower time ratio would be better. Comparing the six pieces, Pawn has the highest odds of being a high quality move, followed by Bishop and Knight Thus, when the player has to make a quick decision with very less time left, Pawn and Bishop should take piority. However, it is noticed that when time ratio decreases to 0.00165, the evaluation difference almost reduced to zero. Thus, it is not recommended to make a move with a very low Time ratio. 5.1.3.1 Quality of moves by piece when remaining time is low Taking the perspective of Time left, it is different from the Time ratio graph. There is no significant increase in EvalDiff as the time left is reducing from 60 seconds. However, we could still find out moving which piece would yeild the highest possibility of a better evaluation. King has the highest Evaluation, followed by Rook and Pawn. Bishop and Knight should be avoided to be used when remaining time is low as they have the lowest Evaluation difference. 5.1.3.2 Quality of moves by piece when time spent is low It is found that the lowest time spent on a move would be around 0.6 seconds. Again, unlike the time ratio graph, the span of Evaluation difference stays the same . However, in contrast to the previous graph, Pawn is statistically the best pick for move if the player wants to make a quick response, followed by King. Queen should be avoid to use when a quick response is needed as the Evaluation difference is the smallest. 5.2 Investigating how the games ended Most of the games end normally with results of either one of the players win or the match is tied. However, we see that over 10% of the games ended with someone ran out of time. From this graph, The majority of matches ended within 25 moves, however, matches that end with one player ran out of time were mostly happening at 35 moves. Number of matches ended with the reason of rules infraction is neglectable. 2D density graph for time left vs time spent for the last move From this graph, Most Time ratio lies between 0.1 and 0.01 when it is the last move. We can see the most densed area of graph happens when time left is less than 25 and time spent is less than 1.25. That shows when it comes to the last move, the time left is no more than 25 seconds and the time spent is no more than 1.25 seconds. Moreover, there is another peak occurs when remaining time is around 225 seconds. That tells a large number of games ended during that amount of Time left Another way to see it, majority of the games end around Time ratio = 0.1 and 0.01 5.2.1 Use of pieces at the end game The majority of non draw games ended with Queen being the last piece to move, followed by Rook. However, in draw games, King and Queen are most frequently used pieces for the last move. Taking the different kinds of mate into factor and faceting the data by the result, we can see that Black and White side has extremely close distribution for the three types of Mate when it comes to wnning. Knight is the most used piece for a normal mate, followed by Bishop and Pawn. However, if it is a missed mate, Queen would be the most used piece. King would be the most used piece when it is a hung mate. In games that had results of Draw, the distribution is different with King being the most used one if it is a hung mate. Please note that Time ratio is scaled-up from 0 to 1 to 0 to 100%: This graph plots with the four most frequently used pieces for winning move. The relationship between Time ratio and Move number gave some extra insights to the use of peices at the end game As expected, King has the widest span on the Move number axis and has the lowest Time ratio. Long span on the Move number shows that King tends to survive longer as King is the most valuable piece which determines the winner of the game so any move made to it should be thoughtful and careful, thus, a lower time ratio. With Queen, Rook, and Bishop not being that decisive to the outcome of the game compared to King, we can see all of them has a lower span on the Move number axis. 5.2.2 Time left and time ratio when the losers ran out of time Please note that Time ratio is scaled-up from 0 to 1 to 0 to 100%: It could be seen that the majority of players who won because their opponent ran out of time had suffucient time left. Most of them had more than 30 seconds left. Considering time forfeit games only, time ratio of the winner are mostly below 10% while the density plot shows it concentrated at Time ratio = 0.02 and Move Number = 30. Also, we can observe that there are less outliers for time ratio when the move number is very high. It is believed that games that have a hugh amount of moves would result in smaller time ratio as there is not much time left. "],["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component "],["conclusion.html", "Chapter 7 Conclusion 7.1 Limitations 7.2 Future directions", " Chapter 7 Conclusion 7.1 Limitations There were several limits to our analysis. The analysis was done exclusively on 600 + 0 Time Format. From the previous section, we have discussed that this format is the most played time format on lichess.org and the elo of players were representative of the whole data set. However, it is still 17% of the total games. There are other forms of chess games such as hyper bullet (less than 1 minute), bullet (1 - 3 minute), blitz (less than 10 minutes), rapid (10 - 60 minutes), and normal (90 minutes). Analysis on these different categorizations of chess could have yielded interesting insights. The data set was gathered over a brief period. The data set was exclusively collected in October 2021. Considering the history of chess, the gameplay and strategies in chess do not change in a month. However, using the data from a longer period would have represented the gameplay in lichess.org better. The data set was exclusively from lichess.org. For online chess, there are other well-established platforms such as chess.com or chess24. Depending on the platform, there will be differences between player gameplay. However, chess24 and chess.com do not have API systems that would allow access to gameplay data. Limitations 1 and 2 were due to the technical limits of working on our computers. Without any form of database, it was hard to generate and share data between teammates that were easily over 10 GB. 7.2 Future directions The lichess database contains PGNs from 2013. Although there is a low chance that all the games are annotated, it would be interesting to conduct the study over the extensive amount of game data they own. Comparisons between the time controls would also yield interesting results. Since lichess database provides player profiles, studying a players decision over time might also lead to fascinating insights. If players get to compare their strengths and weaknesses to the greater mass, they may have an easier time improving at chess and managing their time. The best way to conduct future studies would be using databases and data manipulation languages such as SQL. Lichess.org is a nonprofit website running on donations and as a result, they dont store all of their games in a database. It would have been convenient if lichess.org provided APIs like tweepy. In multiple stages of our data transformation, using databases could have significantly improved the organization and manipulation of data. Filtering and mutating data would take far less effort. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
